# Generated by Django 4.1.4 on 2022-12-06 21:45

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('title', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('genre_id', models.IntegerField(unique=True)),
                ('supergenre', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='podcasts.genre')),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='Podcast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=1000)),
                ('artist', models.CharField(max_length=1000)),
                ('pod_id', models.IntegerField(unique=True)),
                ('feed_url', models.CharField(max_length=1000)),
                ('reviews_url', models.CharField(max_length=1000)),
                ('artwork_url', models.CharField(max_length=1000)),
                ('country', models.CharField(max_length=50)),
                ('explicit', models.BooleanField(default=False)),
                ('copyright_text', models.CharField(max_length=5000)),
                ('description', models.TextField(max_length=5000)),
                ('discriminate', models.BooleanField(default=False)),
                ('view_count', models.IntegerField(default=0)),
                ('genres', models.ManyToManyField(related_name='genre_genres', to='podcasts.genre')),
                ('primary_genre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='genre_primary', to='podcasts.genre')),
            ],
            options={
                'ordering': ['-view_count', 'title', 'discriminate'],
            },
        ),
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pub_date', models.DateTimeField(default=None, null=True)),
                ('title', models.CharField(max_length=1000)),
                ('description', models.TextField(blank=True, max_length=5000, null=True)),
                ('length', models.DurationField(blank=True, null=True)),
                ('url', models.CharField(max_length=1000)),
                ('kind', models.CharField(max_length=16)),
                ('size', models.CharField(blank=True, max_length=16, null=True)),
                ('podcast', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='podcasts.podcast')),
            ],
            options={
                'ordering': ('pub_date',),
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.TextField(blank=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddIndex(
            model_name='podcast',
            index=models.Index(fields=['artist', 'primary_genre'], name='podcasts_po_artist_d927d4_idx'),
        ),
    ]
